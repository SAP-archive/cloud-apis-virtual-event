#!/usr/bin/env bash

# Workflow API

# Bring in common values
source shared

output=silent # verbose or silent

# Retrieve an access token using the Client Credentials grant type
get_access_token () {
  curl \
    --"$output" \
    --user "$clientid:$clientsecret" \
    --data "grant_type=client_credentials" \
    "$authserver/oauth/token" \
  | jq -r .access_token
}

# Add authorities to service instance
add_authorities () {
    local jsonfile=$1
    if [[ -z "$jsonfile" ]]; then
      echo Usage: add_authorities jsonfile
      exit 1
    fi
    cf update-service $instance -c "$jsonfile"
}

# List workflow definitions
list_workflow_definitions () {
  curl \
    --"$output" \
    --header "Authorization: Bearer $access_token" \
    "$resourceserverapiroot/v1/workflow-definitions" \
  | jq .
}

# List workflow instances
list_workflow_instances () {
  curl \
    --"$output" \
    --header "Authorization: Bearer $access_token" \
    "$resourceserverapiroot/v1/workflow-instances?status=RUNNING,ERRONEOUS,SUSPENDED,CANCELED,COMPLETED" \
  | jq .
}

# Start a new instance of a workflow definition
start_workflow_instance () {
  local definition=$1
  if [[ -z "$definition" ]]; then
    echo Usage: start_workflow_instance definition
    exit 1
  fi
  curl \
    --"$output" \
    --header "Authorization: Bearer $access_token" \
    --header "Content-Type: application/json" \
    --data "{\"definitionId\": \"$definition\", \"context\": {}}" \
    "$resourceserverapiroot/v1/workflow-instances" \
  | jq .
}



########################################################################

commands=$(cat <<EO_COMMANDS
add_authorities
get_access_token
list_workflow_definitions
list_workflow_instances
start_workflow_instance
EO_COMMANDS
)

# Get OAuth 2.0 and API endpoint details from servicekey data
clientid=$(jq -r .uaa.clientid < "$keyfile")
clientsecret=$(jq -r .uaa.clientsecret < "$keyfile")
authserver=$(jq -r .uaa.url < "$keyfile")
resourceserverapiroot=$(jq -r .endpoints.workflow_rest_url < "$keyfile")

# Examine and fulfil command given (either list the commands or execute one)
command=$1
case $command in
  "")
    echo "$commands"
    ;;
  *)
    shift
    access_token=$(get_access_token)
    $command "$@"
    ;;
esac
